#!/bin/bash

# Copyright 2014 Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


set -euo pipefail

HOOKS_DIR="$(dirname "$(test -L "$0" && echo "$(dirname $0)/$(readlink "$0")" || echo "$0")")"

# Lint python files
files_with_lint_errors=()
files_need_boilerplate=()
for file in $(git diff --cached --name-only --diff-filter ACM | grep "\.py"); do
  # Check for files without the required boilerplate.
  boilerplate=$("${HOOKS_DIR}/boilerplate.sh" "${file}")
  if [[ "$boilerplate" -eq "0" ]]; then
    files_need_boilerplate+=("${file}")
  fi

  # Check for lint errors
  lint_err=$("${HOOKS_DIR}/lint.sh" "${file}")
  if [[ "$lint_err" -eq "0" ]]; then
    files_with_lint_errors+=("${file}")
  fi
done

# Check sh files for boilerplate
for file in $(git diff --cached --name-only --diff-filter ACM | grep "\.sh"); do
  # Check for files without the required boilerplate.
  boilerplate=$("${HOOKS_DIR}/boilerplate.sh" "${file}")
  if [[ "$boilerplate" -eq "0" ]]; then
    files_need_boilerplate+=("${file}")
  fi
done

if [[ "${#files_need_boilerplate[@]}" -ne 0 ]]; then
  (
    echo
    echo "# *** ERROR: *** Some files are missing the required boilerplate"
    echo "# header from hooks/boilerplate.txt:"
    for file in "${files_need_boilerplate[@]}"; do
      echo "#   ${file}"
    done
    echo "# See hooks/boilerplate.\${EXT}.txt for required header."
    echo "#"
    echo "# Your commit will be aborted unless you fix these."
    echo "#   COMMIT_BLOCKED_ON_BOILERPLATE"
    echo
  ) >> $1
fi

if [[ "${#files_with_lint_errors[@]}" -ne 0 ]]; then
  (
    echo
    echo "# *** ERROR: *** Some files have lint errors:"
    for file in "${files_with_lint_errors[@]}"; do
      echo "#   ${file}"
    done
    echo "# Your commit will be aborted unless you fix these."
    echo "#   COMMIT_BLOCKED_ON_LINT"
    echo
  ) >> $1
fi

if [[ -z $(command -v tox) ]]; then
  >&2 echo "Missing tox. Install it via 'pip' to enable unit testing."
  exit 1
else
  UNITTEST_RESULT=$(tox -e py27 || echo "FAILED")
  if [[ "$UNITTEST_RESULT" == *"FAILED"* ]]; then
    (
      echo
      echo "# *** ERROR: *** Unit test failure."
      echo "# Your commit will be aborted unless you fix these."
      echo "#   COMMIT_BLOCKED_ON_UNIT_TESTS"
      echo
    ) >> $1
  fi
fi
