#!/usr/bin/env bash

# Verify the number of arguments
if [ $# -ne 2 ]; then
    echo "USAGE: drive-release.sh <next version number> <path to clone pkb into>"
    echo for example:
    echo "  drive-release.sh 1.12.0 ~"
    exit 1
fi

START_DIR=$(pwd)

VERSION=$1
CLONE_DIR=$2

PKB_ROOT=$CLONE_DIR/PerfKitBenchmarker
GIT_TAG=v$VERSION
GIT_BRANCH=release-$VERSION

# Get previous release tag
PREV_TAG=$(git tag --sort version:refname | tail -n 1)

function cleanup() {
    cd $START_DIR
    rm -rf $PKB_ROOT
}

# Verify the arguments
if [ ! -d "$CLONE_DIR" ]; then
    echo Specified path to clone PKB into doesn\'t exist: $CLONE_DIR
    echo Aborting
    exit 1
fi

if [ -d "$PKB_ROOT" ]; then
    echo A clone of PKB already exists in $CLONE_DIR
    echo Aborting
    exit 1
fi

echo We will drive a new release: $GIT_TAG
echo The previous release was: $PREV_TAG
printf "Do you want to proceed? (Y/N): "
read DO_RELEASE
echo
if [ "$DO_RELEASE" != "Y" ]; then
    echo Aborting release
    cleanup
    exit 1
fi

# Get and verify github credentials
printf "GitHub username: "
read GH_USER
printf "GitHub password: "
read -s GH_PASSWORD
echo
GH_CRED_VERIFY=$(curl -s -u $GH_USER:$GH_PASSWORD https://api.github.com/user | jq -r '.message')
if [ "$GH_CRED_VERIFY" = "Bad credentials" ]; then
    echo Bad GitHub credentials - aborting
    exit 1
fi

echo GitHub credentials are valid!

# Clone PKB and cd into it
echo Cloning PKB at $PKB_ROOT
cd $CLONE_DIR
git clone https://github.com/GoogleCloudPlatform/PerfKitBenchmarker
cd PerfKitBenchmarker
# We are now in $PKB_ROOT

# Create release branch
git checkout -b $GIT_BRANCH

# Update CHANGES.md file
CHANGE_LIST=$(cat CHANGES.next.md)
echo "# v${VERSION}" > .new_CHANGES.md
echo >> .new_CHANGES.md
cat CHANGES.next.md >> .new_CHANGES.md
echo >> .new_CHANGES.md
cat CHANGES.md >> .new_CHANGES.md
rm CHANGES.md
mv .new_CHANGES.md CHANGES.md
printf "Breaking changes:\n-\n\nNew features:\n-\n\nEnhancements:\n-\n\nBug fixes and maintenance updates:\n-" > CHANGES.next.md
git add CHANGES.md CHANGES.next.md
git commit -m "Cut a release in CHANGES.md"

# Tag release branch locally
git tag -a $GIT_TAG -m "Release $GIT_TAG"

# Run A/B tests
echo Running A/B tests

python > run-side-by-side.tsv << EOF
from perfkitbenchmarker.linux_benchmarks import VALID_BENCHMARKS
print('\n'.join(VALID_BENCHMARKS.keys()))
EOF

parallel -u -j 4 --colsep '\t' --joblog run-side-by-side.log "tools/side-by-side/side_by_side.py --base $PREV_TAG --head $(git rev-parse $GIT_TAG) --flags='--data_search_paths=perfkitbenchmarker/data --cloud=GCP --gce_network_name=default --project=bionic-baton-343 --zones=us-central1-c --machine_type=n1-standard-8 --benchmarks={1} --ignore_package_requirements' GCP_${GIT_TAG}_qual_{1}.json GCP_${GIT_TAG}_qual_{1}.html" :::: run-side-by-side.tsv

echo A/B tests complete!
echo "Please verify that the results look sane. Are they sane? (Y/N): "
read AB_RESULTS_SANE
echo
if [ "$AB_RESULTS_SANE" != "Y" ]; then
    echo You say the A/B test results are insane! Aborting
    cleanup
    exit 1
fi

# Push release branch
# Note that the git tag won't be pushed yet
git push https://${GH_USER}:${GH_PASSWORD}@github.com/GoogleCloudPlatform/PerfKitBenchmarker.git $GIT_BRANCH

# Create GitHub PR
echo Creating GitHub pull request
GH_PR_JSON="{
  \"title\": \"Release v${VERSION}\",
  \"body\": \"Auto-generated by tools/drive-release.sh script.\",
  \"head\": \"${GIT_BRANCH}\",
  \"base\": \"master\"
}"
GH_PR=$(curl -s -u $GH_USER:$GH_PASSWORD -X POST -H "Content-Type: application/json" -d "$GH_PR_JSON" https://api.github.com/repos/GoogleCloudPlatform/PerfKitBenchmarker/pulls | jq -r '.html_url')

# Ensure GitHub PR is merged
echo GitHub pull request: $GH_PR
echo Either merge the PR and enter \"Y\" here or close it and enter \"N\" here.
echo "Did you merge the PR? (Y/N): "
read GH_PR_MERGED
echo
if [ "$GH_PR_MERGED" != "Y" ]; then
    echo GitHub Pull Request was closed - aborting
    cleanup
    exit 1
fi

# Push the release tag
git push https://${GH_USER}:${GH_PASSWORD}@github.com/GoogleCloudPlatform/PerfKitBenchmarker.git $GIT_TAG

# Publish GitHub release
GH_RELEASE_JSON="{
  \"tag_name\": \"${GIT_TAG}\",
  \"target_commitish\": \"master\",
  \"name\": \"${GIT_TAG}\",
  \"body\": \"$(echo "$CHANGE_LIST" | sed 's/"/\\"/g' | sed -E ':a;N;$!ba;s/\r{0,1}\n/\\n/g')\",
  \"draft\": false,
  \"prerelease\": false
}"
GH_RELEASE=$(curl -s -u $GH_USER:$GH_PASSWORD -X POST -H "Content-Type: application/json" -d "$GH_RELEASE_JSON" https://api.github.com/repos/GoogleCloudPlatform/PerfKitBenchmarker/releases | jq -r '.html_url')
echo GitHub release: $GH_RELEASE

echo -e "\nRelease of version $VERSION completed successfully! :)"

# Clean up
cleanup
