#------------------------------------------------------------------------------
# SPEC CPU2017 config file for: LLVM / Linux / AMD64
#------------------------------------------------------------------------------
#
# This config file is modified from Example-clang-llvm-linux-x86.cfg and tested with:
#    Compiler version(s):     LLVM/3.9.0
#    Operating system(s):     Linux
#    Hardware:                AMD64
#
# If your system differs, (or change anything at all! Just saying...)
# this config file might not work.
# You might find a better config file at http://www.spec.org/cpu2017/results
#
# Compiler issues: Contact your compiler vendor, not SPEC.
# For SPEC help:   http://www.spec.org/cpu2017/Docs/techsupport.html
#------------------------------------------------------------------------------


#--------- Label --------------------------------------------------------------
# Arbitrary string to tag binaries
%define label pkbtest


#--------- Preprocessor -------------------------------------------------------
# use lscpu to help with setting this section

%ifndef %{bits}                #      to control 32 or 64 bit compilation.  Or,
%   define  bits          64   #      you can set it on the command line using:
%endif                         #      'runcpu --define bits=nn'

%ifndef %{ncores}              #      this affects the number of simultaneous
%   define  ncores         8   #      compiles. You can set it on the command line:
%endif                         #      'runcpu --define ncores=nn'

%ifndef %{ncpus}               #      this affects the number of simultaneous
%   define  ncpus         16   #      copies. You can set it on the command line:
%endif                         #      'runcpu --define cpus=nn'

%ifndef %{nnuma}               #      this affects the numa binding.
%   define  nnuma         1    #      You can set it on the command line:
%endif                         #      'runcpu --define nnuma=nn'

# Don't change this part.
%define  os          LINUX
%if %{bits} == 64
%   define model        -m64
%elif %{bits} == 32
%   define model        -m32
%else
%   error Please define number of bits - see instructions in config file
%endif


#--------- Global Settings ----------------------------------------------------
# For info, see:
#            https://www.spec.org/cpu2017/Docs/config.html#fieldname
#   Example: https://www.spec.org/cpu2017/Docs/config.html#tune

#backup_config          = 0                     # Uncomment for cleaner config/ directory
flagsurl01              = $[top]/config/flags/gcc.xml
flagsurl02              = $[top]/config/flags/clang.xml
ignore_errors           = 1
iterations              = 1
label                   = %{label}-m%{bits}
line_width              = 1020
log_line_width          = 1020
makeflags               = --jobs=%{ncores}
mean_anyway             = 1
output_format           = txt,html,cfg,pdf,csv
preENV_OMP_STACKSIZE    = 128M
preenv                  = 1
tune                    = base,peak

#--------- How Many CPUs? -----------------------------------------------------
# Both SPECrate and SPECspeed can test multiple chips / cores / hw threads
#    - For SPECrate,  you set the number of copies.
#    - For SPECspeed, you set the number of threads.
# See: https://www.spec.org/cpu2017/Docs/system-requirements.html#MultipleCPUs
#
#    q. How many should I set?
#    a. Unknown, you will have to try it and see!
#
# To get you started:
#
#     copies - This config file sets 1 copy per core (after you set the
#              'cpucores' variable, just below).
#              Please be sure you have enough memory; if you do not, you might
#              need to run a smaller number of copies.  See:
#              https://www.spec.org/cpu2017/Docs/system-requirements.html#memory
#
#     threads - This config file sets a starting point.  You can try adjusting it.
#               Higher thread counts are much more likely to be useful for
#               fpspeed than for intspeed.

# EDIT(variable by machine) to define system sizes
# Since we are running on different cloud machines,
# use --copies and --threads flags to override the
# default setting of 1 copy per core and 1 thread per cpu
intrate,fprate:
   copies                  = %{ncores}    # overriden by --copies
intspeed,fpspeed:
   threads                 = %{ncpus}     # overriden by --threads

#-------- CPU binding for rate -----------------------------------------------
# When you run multiple copies for SPECrate mode, performance
# may be improved if you bind the copies to specific processors.

intrate,fprate:
submit       = echo "$command" > run.sh ; $BIND bash run.sh

# Affinity settings:                     EDIT this section
# Please adjust these values for your
# particular system as these settings are
# for an 8 core, one NUMA node (-m 0) system.
# bind0= numactl -m 0 --physcpubind=0
# bind1= numactl -m 0 --physcpubind=1
# bind2= numactl -m 0 --physcpubind=2
# bind3= numactl -m 0 --physcpubind=3
# bind4= numactl -m 0 --physcpubind=4
# bind5= numactl -m 0 --physcpubind=5
# bind6= numactl -m 0 --physcpubind=6
# bind7= numactl -m 0 --physcpubind=7


#------- Compilers ------------------------------------------------------------
default:
#                                      EDIT paths to LLVM and libraries:
    LLVM_ROOT_PATH     = /opt/pkb/clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04
    LLVM_BIN_PATH      = $[LLVM_ROOT_PATH]/bin
    LLVM_LIB_PATH      = $[LLVM_ROOT_PATH]/lib
    LLVM_INCLUDE_PATH  = $[LLVM_ROOT_PATH]/include

    # EDIT LLVM_GCC_DIR to reflect the GCC path.
    LLVM_GCC_DIR       = /usr/bin
    GFORTRAN_DIR       = /usr/bin

    # Specify Intel OpenMP library path.
    OPENMP_DIR         = /opt/pkb/libomp_oss/exports

    preENV_PATH        = $[LLVM_BIN_PATH]:%{ENV_PATH}

    CC                  = $(LLVM_BIN_PATH)/clang %{model}
    CXX                 = $(LLVM_BIN_PATH)/clang++ %{model}
    FORTRAN_COMP        = $(GFORTRAN_DIR)/gfortran
    FC                  = $(FORTRAN_COMP) %{model}
    CLD                 = $(LLVM_BIN_PATH)/clang %{model}
    FLD                 = $(LLVM_BIN_PATH)/clang %{model}
    # How to say "Show me your version, please"
    CC_VERSION_OPTION   = -v
    CXX_VERSION_OPTION  = -v
    FC_VERSION_OPTION   = -v

default:
%if %{bits} == 64
   sw_base_ptrsize = 64-bit
   sw_peak_ptrsize = 64-bit
%else
   sw_base_ptrsize = 32-bit
   sw_peak_ptrsize = 32-bit
%endif

intrate,intspeed:                     # 502.gcc_r and 602.gcc_s may need the
%if %{bits} == 32                     # flags from this section.  For 'base',
    EXTRA_COPTIMIZE = -fgnu89-inline  # all benchmarks must use the same
%else                                 # options, so we add them to all of
    LDCFLAGS        = -z muldefs      # integer rate and integer speed.  See:
%endif                                # www.spec.org/cpu2017/Docs/benchmarks/502.gcc_r.html

#--------- Portability --------------------------------------------------------
default:# data model applies to all benchmarks
%if %{bits} == 32
    # Strongly recommended because at run-time, operations using modern file
    # systems may fail spectacularly and frequently (or, worse, quietly and
    # randomly) if a program does not accommodate 64-bit metadata.
    EXTRA_PORTABILITY = -D_FILE_OFFSET_BITS=64
%else
    EXTRA_PORTABILITY = -DSPEC_LP64
%endif

# Benchmark-specific portability (ordered by last 2 digits of bmark number)

500.perlbench_r,600.perlbench_s:  #lang='C'
%if %{bits} == 32
%   define suffix IA32
%else
%   define suffix X64
%endif
   PORTABILITY    = -DSPEC_%{os}_%{suffix}

521.wrf_r,621.wrf_s:  #lang='F,C'
   CPORTABILITY  = -DSPEC_CASE_FLAG
   FPORTABILITY  = -fconvert=big-endian

523.xalancbmk_r,623.xalancbmk_s:  #lang='CXX'
   PORTABILITY   = -DSPEC_%{os}

526.blender_r:  #lang='CXX,C'
    CPORTABILITY = -funsigned-char
    CXXPORTABILITY = -D__BOOL_DEFINED

527.cam4_r,627.cam4_s:  #lang='F,C'
   PORTABILITY   = -DSPEC_CASE_FLAG

628.pop2_s:  #lang='F,C'
    CPORTABILITY = -DSPEC_CASE_FLAG
    FPORTABILITY = -fconvert=big-endian

#--------  Baseline Tuning Flags ----------------------------------------------
default=base:
    COPTIMIZE     = -O3 -mavx -Ofast -ffast-math -fno-strict-aliasing \
                    -mllvm -unroll-threshold=100 -mno-avx2 \
                    -mllvm -inline-threshold=1000
    CXXOPTIMIZE   = -O3 -mavx -fno-strict-aliasing \
                    -mllvm -unroll-threshold=100 \
                    -mllvm -inline-threshold=1000
    FOPTIMIZE     = -O3 -mavx -funroll-loops -Ofast -ffast-math
    EXTRA_FLIBS   = -lgfortran -lm
    LDOPTIMIZE    = -z muldefs

intrate,fprate:
    preENV_LIBRARY_PATH     = $[LLVM_LIB_PATH]
    preENV_LD_LIBRARY_PATH  = $[LLVM_LIB_PATH]
   #preENV_LIBRARY_PATH     = $[LLVM_LIB_PATH]:%{ENV_LIBRARY_PATH}
   #preENV_LD_LIBRARY_PATH  = $[LLVM_LIB_PATH]:%{ENV_LD_LIBRARY_PATH}

#
# Speed (OpenMP and Autopar allowed)
#
%if %{bits} == 32
   intspeed,fpspeed:
   #
   # Many of the speed benchmarks (6nn.benchmark_s) do not fit in 32 bits
   # If you wish to run SPECint2017_speed or SPECfp2017_speed, please use
   #
   #     runcpu --define bits=64
   #
   fail_build = 1
%else
   intspeed,fpspeed:
       OPENMP_LIB_PATH          = $[OPENMP_DIR]/lin_32e/lib
       EXTRA_OPTIMIZE           = -DSPEC_OPENMP -fopenmp -Wno-return-type -DUSE_OPENMP -I $(OPENMP_DIR)/common/include
       EXTRA_LIBS               = -fopenmp=libomp -L$(OPENMP_LIB_PATH) -lomp
       EXTRA_FLIBS              = -fopenmp=libomp -lgfortran -lm
       preENV_LIBRARY_PATH      = $[LLVM_LIB_PATH]:$[OPENMP_LIB_PATH]
       preENV_LD_LIBRARY_PATH   = $[LLVM_LIB_PATH]:$[OPENMP_LIB_PATH]
      #preENV_LIBRARY_PATH      = $[LLVM_LIB_PATH]:$[OPENMP_LIB_PATH]:%{ENV_LIBRARY_PATH}
      #preENV_LD_LIBRARY_PATH   = $[LLVM_LIB_PATH]:$[OPENMP_LIB_PATH]:%{ENV_LD_LIBRARY_PATH}
       preENV_OMP_THREAD_LIMIT  = %{cputhreads}
       preENV_OMP_STACKSIZE     = 128M
       preENV_GOMP_CPU_AFFINITY = 0-%{cputhreads}
%endif

#--------  Peak Tuning Flags ----------------------------------------------
default=peak:
    COPTIMIZE     = -O3 -mavx -Ofast -ffast-math \
                    -mllvm -unroll-threshold=100 -mno-avx2 \
                    -mllvm -inline-threshold=1000
    CXXOPTIMIZE   = -O3 -mavx -fno-strict-aliasing \
                    -mllvm -unroll-threshold=100 \
                    -mllvm -inline-threshold=1000
    EXTRA_FLIBS   = -lgfortran -lm
    FOPTIMIZE     = -Ofast -mavx -funroll-loops -fno-stack-arrays

    feedback      = 0 # FDO, use command line flag -feedback to turn FDO on

600.perlbench_s=peak=default:
#[56]00.perlbench[rs] has non standard signed overflow
    EXTRA_OPTIMIZE           = -fno-strict-overflow
    PASS1_FLAGS  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/perlbench_s.profraw
    fdo_post1    = /opt/pkb/clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04/bin/llvm-profdata merge -output=/scratch/cpu2017/fdo_profiles/perlbench_s.profdata /scratch/cpu2017/fdo_profiles/perlbench_s.profraw
    PASS2_FLAGS  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/perlbench_s.profdata

500.perlbench_r=peak:
    PASS1_FLAGS  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/perlbench_r.profraw
    fdo_post1    = /opt/pkb/clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04/bin/llvm-profdata merge -output=/scratch/cpu2017/fdo_profiles/perlbench_r.profdata /scratch/cpu2017/fdo_profiles/perlbench_r.profraw
    PASS2_FLAGS  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/perlbench_r.profdata

602.gcc_s=peak:  #lang='C'
    LDOPTIMIZE    = -z muldefs
    PASS1_FLAGS  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/gcc_s.profraw
    fdo_post1    = /opt/pkb/clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04/bin/llvm-profdata merge -output=/scratch/cpu2017/fdo_profiles/gcc_s.profdata /scratch/cpu2017/fdo_profiles/gcc_s.profraw
    PASS2_FLAGS  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/gcc_s.profdata

502.gcc_r=peak:  #lang='C'
    LDOPTIMIZE    = -z muldefs
    PASS1_FLAGS  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/gcc_r.profraw
    fdo_post1    = /opt/pkb/clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04/bin/llvm-profdata merge -output=/scratch/cpu2017/fdo_profiles/gcc_r.profdata /scratch/cpu2017/fdo_profiles/gcc_r.profraw
    PASS2_FLAGS  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/gcc_r.profdata

605.mcf_s=peak:
    PASS1_FLAGS  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/mcf_s.profraw
    fdo_post1    = /opt/pkb/clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04/bin/llvm-profdata merge -output=/scratch/cpu2017/fdo_profiles/mcf_s.profdata /scratch/cpu2017/fdo_profiles/mcf_s.profraw
    PASS2_FLAGS  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/mcf_s.profdata

505.mcf_r=peak:
    PASS1_FLAGS  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/mcf_r.profraw
    fdo_post1    = /opt/pkb/clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04/bin/llvm-profdata merge -output=/scratch/cpu2017/fdo_profiles/mcf_r.profdata /scratch/cpu2017/fdo_profiles/mcf_r.profraw
    PASS2_FLAGS  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/mcf_r.profdata

620.omnetpp_s=peak:
    PASS1_FLAGS  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/omnetpp_s.profraw
    fdo_post1    = /opt/pkb/clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04/bin/llvm-profdata merge -output=/scratch/cpu2017/fdo_profiles/omnetpp_s.profdata /scratch/cpu2017/fdo_profiles/omnetpp_s.profraw
    PASS2_FLAGS  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/omnetpp_s.profdata

520.omnetpp_r=peak:
    PASS1_FLAGS  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/omnetpp_r.profraw
    fdo_post1    = /opt/pkb/clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04/bin/llvm-profdata merge -output=/scratch/cpu2017/fdo_profiles/omnetpp_r.profdata /scratch/cpu2017/fdo_profiles/omnetpp_r.profraw
    PASS2_FLAGS  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/omnetpp_r.profdata

623.xalancbmk_s=peak:  #lang='CXX
    CXXOPTIMIZE   = -O3 -mavx
    EXTRA_PORTABILITY        = -D_FILE_OFFSET_BITS=64
    PASS1_FLAGS  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/xalancbmk_s.profraw
    fdo_post1    = /opt/pkb/clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04/bin/llvm-profdata merge -output=/scratch/cpu2017/fdo_profiles/xalancbmk_s.profdata /scratch/cpu2017/fdo_profiles/xalancbmk_s.profraw
    PASS2_FLAGS  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/xalancbmk_s.profdata

523.xalancbmk_r=peak:  #lang='CXX
    CXXOPTIMIZE   = -O3 -mavx
    EXTRA_PORTABILITY        = -D_FILE_OFFSET_BITS=64
    PASS1_FLAGS  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/xalancbmk_r.profraw
    fdo_post1    = /opt/pkb/clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04/bin/llvm-profdata merge -output=/scratch/cpu2017/fdo_profiles/xalancbmk_r.profdata /scratch/cpu2017/fdo_profiles/xalancbmk_r.profraw
    PASS2_FLAGS  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/xalancbmk_r.profdata

625.x264_s=peak:
    PASS1_FLAGS  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/x264_s.profraw
    fdo_post1    = /opt/pkb/clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04/bin/llvm-profdata merge -output=/scratch/cpu2017/fdo_profiles/x264_s.profdata /scratch/cpu2017/fdo_profiles/x264_s.profraw
    PASS2_FLAGS  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/x264_s.profdata

525.x264_r=peak:
    PASS1_FLAGS  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/x264_r.profraw
    fdo_post1    = /opt/pkb/clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04/bin/llvm-profdata merge -output=/scratch/cpu2017/fdo_profiles/x264_r.profdata /scratch/cpu2017/fdo_profiles/x264_r.profraw
    PASS2_FLAGS  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/x264_r.profdata

631.deepsjeng_s=peak:
    PASS1_FLAGS  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/deepsjeng_s.profraw
    fdo_post1    = /opt/pkb/clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04/bin/llvm-profdata merge -output=/scratch/cpu2017/fdo_profiles/deepsjeng_s.profdata /scratch/cpu2017/fdo_profiles/deepsjeng_s.profraw
    PASS2_FLAGS  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/deepsjeng_s.profdata

531.deepsjeng_r=peak:
    PASS1_FLAGS  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/deepsjeng_r.profraw
    fdo_post1    = /opt/pkb/clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04/bin/llvm-profdata merge -output=/scratch/cpu2017/fdo_profiles/deepsjeng_r.profdata /scratch/cpu2017/fdo_profiles/deepsjeng_r.profraw
    PASS2_FLAGS  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/deepsjeng_r.profdata

641.leela_s=peak:
    PASS1_FLAGS  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/leela_s.profraw
    fdo_post1    = /opt/pkb/clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04/bin/llvm-profdata merge -output=/scratch/cpu2017/fdo_profiles/leela_s.profdata /scratch/cpu2017/fdo_profiles/leela_s.profraw
    PASS2_FLAGS  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/leela_s.profdata

541.leela_r=peak:
    PASS1_FLAGS  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/leela_r.profraw
    fdo_post1    = /opt/pkb/clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04/bin/llvm-profdata merge -output=/scratch/cpu2017/fdo_profiles/leela_r.profdata /scratch/cpu2017/fdo_profiles/leela_r.profraw
    PASS2_FLAGS  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/leela_r.profdata

648.exchange2_s=peak:
    PASS1_CXXOPTIMIZE  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/exchange2_s.profraw
    PASS2_CXXOPTIMIZE  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/exchange2_s.profdata

548.exchange2_r=peak:
    PASS1_FLAGS  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/exchange2_r.profraw
    fdo_post1    = /opt/pkb/clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04/bin/llvm-profdata merge -output=/scratch/cpu2017/fdo_profiles/exchange2_r.profdata /scratch/cpu2017/fdo_profiles/exchange2_r.profraw
    PASS2_FLAGS  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/exchange2_r.profdata

657.xz_s=peak:
    PASS1_FLAGS  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/xz_s.profraw
    fdo_post1    = /opt/pkb/clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04/bin/llvm-profdata merge -output=/scratch/cpu2017/fdo_profiles/xz_s.profdata /scratch/cpu2017/fdo_profiles/xz_s.profraw
    PASS2_FLAGS  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/xz_s.profdata

557.xz_r=peak:
    PASS1_FLAGS  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/xz_r.profraw
    fdo_post1    = /opt/pkb/clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04/bin/llvm-profdata merge -output=/scratch/cpu2017/fdo_profiles/xz_r.profdata /scratch/cpu2017/fdo_profiles/xz_r.profraw
    PASS2_FLAGS  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/xz_r.profdata

603.bwaves_s=peak:
    PASS1_CXXOPTIMIZE  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/bwaves_s.profraw
    PASS2_CXXOPTIMIZE  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/bwaves_s.profdata

503.bwaves_r=peak:
    PASS1_CXXOPTIMIZE  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/bwaves_r.profraw
    PASS2_CXXOPTIMIZE  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/bwaves_r.profdata

607.cactuBSSN_s=peak:
    PASS1_CXXOPTIMIZE  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/cactuBSSN_s.profraw
    fdo_post1    = /opt/pkb/clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04/bin/llvm-profdata merge -output=/scratch/cpu2017/fdo_profiles/cactuBSSN_s.profdata /scratch/cpu2017/fdo_profiles/cactuBSSN_s.profraw
    PASS2_CXXOPTIMIZE  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/cactuBSSN_s.profdata

507.cactuBSSN_r=peak:
    PASS1_CXXOPTIMIZE  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/cactuBSSN_r.profraw
    fdo_post1    = /opt/pkb/clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04/bin/llvm-profdata merge -output=/scratch/cpu2017/fdo_profiles/cactuBSSN_r.profdata /scratch/cpu2017/fdo_profiles/cactuBSSN_r.profraw
    PASS2_CXXOPTIMIZE  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/cactuBSSN_r.profdata

508.namd_r=peak:
    PASS1_FLAGS  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/namd_r.profraw
    fdo_post1    = /opt/pkb/clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04/bin/llvm-profdata merge -output=/scratch/cpu2017/fdo_profiles/namd_r.profdata /scratch/cpu2017/fdo_profiles/namd_r.profraw
    PASS2_FLAGS  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/namd_r.profdata

510.parest_r=peak:
    PASS1_FLAGS  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/parest_r.profraw
    fdo_post1    = /opt/pkb/clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04/bin/llvm-profdata merge -output=/scratch/cpu2017/fdo_profiles/parest_r.profdata /scratch/cpu2017/fdo_profiles/parest_r.profraw
    PASS2_FLAGS  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/parest_r.profdata

511.povray_r=peak:
    PASS1_FLAGS  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/povray_r.profraw
    fdo_post1    = /opt/pkb/clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04/bin/llvm-profdata merge -output=/scratch/cpu2017/fdo_profiles/povray_r.profdata /scratch/cpu2017/fdo_profiles/povray_r.profraw
    PASS2_FLAGS  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/povray_r.profdata

619.lbm_s=peak:
    PASS1_FLAGS  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/lbm_s.profraw
    fdo_post1    = /opt/pkb/clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04/bin/llvm-profdata merge -output=/scratch/cpu2017/fdo_profiles/lbm_s.profdata /scratch/cpu2017/fdo_profiles/lbm_s.profraw
    PASS2_FLAGS  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/lbm_s.profdata

519.lbm_r=peak:
    PASS1_FLAGS  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/lbm_r.profraw
    fdo_post1    = /opt/pkb/clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04/bin/llvm-profdata merge -output=/scratch/cpu2017/fdo_profiles/lbm_r.profdata /scratch/cpu2017/fdo_profiles/lbm_r.profraw
    PASS2_FLAGS  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/lbm_r.profdata

621.wrf_s=peak:  #lang='F,C'
    COPTIMIZE     = -O3 -freciprocal-math -ffp-contract=fast -mavx -ffast-math
    EXTRA_FLIBS   = -lgfortran -lm
    FOPTIMIZE     = -O3 -freciprocal-math -ffp-contract=fast -mavx -funroll-loops

521.wrf_r=peak:  #lang='F,C'
    COPTIMIZE     = -O3 -freciprocal-math -ffp-contract=fast -mavx -ffast-math
    EXTRA_FLIBS   = -lgfortran -lm
    FOPTIMIZE     = -O3 -freciprocal-math -ffp-contract=fast -mavx -funroll-loops

526.blender_r=peak:
    PASS1_FLAGS  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/blender_r.profraw
    fdo_post1    = /opt/pkb/clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04/bin/llvm-profdata merge -output=/scratch/cpu2017/fdo_profiles/blender_r.profdata /scratch/cpu2017/fdo_profiles/blender_r.profraw
    PASS2_FLAGS  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/blender_r.profdata

627.cam4_s=peak:
    PASS1_CXXOPTIMIZE  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/cam4_s.profraw
    PASS2_CXXOPTIMIZE  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/cam4_s.profdata

527.cam4_r=peak:
    PASS1_CXXOPTIMIZE  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/cam4_r.profraw
    PASS2_CXXOPTIMIZE  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/cam4_r.profdata

628.pop2_s=peak:
    PASS1_CXXOPTIMIZE  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/pop2_s.profraw
    PASS2_CXXOPTIMIZE  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/pop2_s.profdata

538.imagick_r=peak:
    PASS1_FLAGS  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/imagick_r.profraw
    fdo_post1    = /opt/pkb/clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04/bin/llvm-profdata merge -output=/scratch/cpu2017/fdo_profiles/imagick_r.profdata /scratch/cpu2017/fdo_profiles/imagick_r.profraw
    PASS2_FLAGS  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/imagick_r.profdata

638.imagick_s=peak:
    PASS1_FLAGS  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/imagick_s.profraw
    fdo_post1    = /opt/pkb/clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04/bin/llvm-profdata merge -output=/scratch/cpu2017/fdo_profiles/imagick_s.profdata /scratch/cpu2017/fdo_profiles/imagick_s.profraw
    PASS2_FLAGS  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/imagick_s.profdata

544.nab_r=peak:
    PASS1_FLAGS  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/nab_r.profraw
    fdo_post1    = /opt/pkb/clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04/bin/llvm-profdata merge -output=/scratch/cpu2017/fdo_profiles/nab_r.profdata /scratch/cpu2017/fdo_profiles/nab_r.profraw
    PASS2_FLAGS  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/nab_r.profdata

644.nab_s=peak:
    PASS1_FLAGS  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/nab_s.profraw
    fdo_post1    = /opt/pkb/clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04/bin/llvm-profdata merge -output=/scratch/cpu2017/fdo_profiles/nab_s.profdata /scratch/cpu2017/fdo_profiles/nab_s.profraw
    PASS2_FLAGS  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/nab_s.profdata

549.fotonik3d_r=peak:
    PASS1_CXXOPTIMIZE  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/fotonik3d_r.profraw
    PASS2_CXXOPTIMIZE  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/fotonik3d_r.profdata

649.fotonik3d_s=peak:
    PASS1_CXXOPTIMIZE  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/fotonik3d_s.profraw
    PASS2_CXXOPTIMIZE  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/fotonik3d_s.profdata

554.roms_r=peak:
    PASS1_CXXOPTIMIZE  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/roms_r.profraw
    PASS2_CXXOPTIMIZE  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/roms_r.profdata

654.roms_s=peak:
    PASS1_CXXOPTIMIZE  = -fprofile-instr-generate=/scratch/cpu2017/fdo_profiles/roms_s.profraw
    PASS2_CXXOPTIMIZE  = -fprofile-instr-use=/scratch/cpu2017/fdo_profiles/roms_s.profdata


#------------------------------------------------------------------------------
# Tester and System Descriptions - EDIT all sections below this point
#------------------------------------------------------------------------------
#   For info about any field, see
#             https://www.spec.org/cpu2017/Docs/config.html#fieldname
#   Example:  https://www.spec.org/cpu2017/Docs/config.html#hw_memory
#-------------------------------------------------------------------------------

#--------- EDIT to match your version -----------------------------------------
default:
   sw_compiler001   = C/C++: Version 3.9.0 of Clang, the
   sw_compiler002   = LLVM Compiler Infrastructure
   sw_compiler003   = Fortran: Version 4.8.2 of GCC, the
   sw_compiler004   = GNU Compiler Collection
#--------- EDIT info about you ------------------------------------------------
# To understand the difference between hw_vendor/sponsor/tester, see:
#     https://www.spec.org/cpu2017/Docs/config.html#test_sponsor
intrate,intspeed,fprate,fpspeed: # Important: keep this line
   hw_vendor          = Google Compute Engine
   tester             = Google
   test_sponsor       = Google
   license_num        =
#  prepared_by        = me! :D


#--------- EDIT system availability dates -------------------------------------
intrate,intspeed,fprate,fpspeed: # Important: keep this line
                        # Example                             # Brief info about field
   hw_avail           = # Nov-2099                            # Date of LAST hardware component to ship
   sw_avail           = # Nov-2099                            # Date of LAST software component to ship

#--------- EDIT system information --------------------------------------------
intrate,intspeed,fprate,fpspeed: # Important: keep this line
                        # Example                             # Brief info about field
 # hw_cpu_name        = # Intel Xeon E9-9999 v9               # chip name
   hw_cpu_nominal_mhz = # 9999                                # Nominal chip frequency, in MHz
   hw_cpu_max_mhz     = # 9999                                # Max chip frequency, in MHz
 # hw_disk            = # 9 x 9 TB SATA III 9999 RPM          # Size, type, other perf-relevant info
   hw_model           = # TurboBlaster 3000                   # system model name
 # hw_nchips          = # 99                                  # number chips enabled
   hw_ncores          = # 9999                                # number cores enabled
   hw_ncpuorder       = # 1-9 chips                           # Ordering options
   hw_nthreadspercore = # 9                                   # number threads enabled per core
   hw_other           = # TurboNUMA Router 10 Gb              # Other perf-relevant hw, or "None"

#  hw_memory001       = # 999 GB (99 x 9 GB 2Rx4 PC4-2133P-R, # The 'PCn-etc' is from the JEDEC
#  hw_memory002       = # running at 1600 MHz)                # label on the DIMM.

   hw_pcache          = # 99 KB I + 99 KB D on chip per core  # Primary cache size, type, location
   hw_scache          = # 99 KB I+D on chip per 9 cores       # Second cache or "None"
   hw_tcache          = # 9 MB I+D on chip per chip           # Third  cache or "None"
   hw_ocache          = # 9 GB I+D off chip per system board  # Other cache or "None"

   fw_bios            = # American Megatrends 39030100 02/29/2016 # Firmware information
 # sw_file            = # ext99                               # File system
 # sw_os001           = # Linux Sailboat                      # Operating system
 # sw_os002           = # Distribution 7.2 SP1                # and version
   sw_other           = # TurboHeap Library V8.1              # Other perf-relevant sw, or "None"
 # sw_state           = # Run level 99                        # Software state.

# Note: Some commented-out fields above are automatically set to preliminary
# values by sysinfo
#       https://www.spec.org/cpu2017/Docs/config.html#sysinfo
# Uncomment lines for which you already know a better answer than sysinfo

# 'ulimit -s unlimited' was used to set the environment stack size
# echo 1 > /proc/sys/vm/swappiness to swap only if necessary
# echo 1 > /proc/sys/vm/zone_reclaim_mode to free local node memory and avoid remote memory
# sync ; echo 3 > /proc/sys/vm/drop_caches to reset caches before invoking runcpu
# openmp stack size set in this config file.
